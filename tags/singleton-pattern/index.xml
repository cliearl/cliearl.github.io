<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Singleton Pattern on 냉동코더의 기술블로그</title>
    <link>https://cliearl.github.io/tags/singleton-pattern/</link>
    <description>Recent content in Singleton Pattern on 냉동코더의 기술블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Sep 2021 15:59:57 +0900</lastBuildDate><atom:link href="https://cliearl.github.io/tags/singleton-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>알기쉬운 Singleton Pattern</title>
      <link>https://cliearl.github.io/posts/android/understanding-singleton-pattern/</link>
      <pubDate>Sun, 05 Sep 2021 15:59:57 +0900</pubDate>
      
      <guid>https://cliearl.github.io/posts/android/understanding-singleton-pattern/</guid>
      <description>이번 포스팅에서는 싱글톤 패턴에 대해 알아보도록 하겠습니다.
Singleton 이란 싱글톤(Singleton)은 소프트웨어 디자인패턴의 한 종류로, 프로그램 안에서 클래스의 인스턴스가 단 하나만 존재해야 할 때 사용합니다. 예를들어 데이터베이스를 변경할 수 있는 DBHandler 클래스의 인스턴스가 두개 있어서 동시에 데이터베이스에 접근한다면 문제가 생기겠죠.
자바에서는 일반적으로 다음과 같은 방식으로 싱글톤을 구현할 수 있습니다. private를 이용해 외부에서 생성자에 접근하지 못하도록 막고 getInstance를 통해야 인스턴스를 만들 수 있게 합니다. 이 때 static instance를 확인해서 인스턴스가 없으면 객체를 새로 만들고, 있다면 그대로 반환해주는 구조를 가집니다.</description>
    </item>
    
  </channel>
</rss>
