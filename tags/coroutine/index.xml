<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>coroutine on 냉동코더의 기술블로그</title>
    <link>https://cliearl.github.io/tags/coroutine/</link>
    <description>Recent content in coroutine on 냉동코더의 기술블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Nov 2021 08:32:11 +0900</lastBuildDate><atom:link href="https://cliearl.github.io/tags/coroutine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Retrofit으로 다운받은 Json 데이터를 RecyclerView에 표시하기</title>
      <link>https://cliearl.github.io/posts/android/download-json-data-using-retrofit/</link>
      <pubDate>Sun, 07 Nov 2021 08:32:11 +0900</pubDate>
      
      <guid>https://cliearl.github.io/posts/android/download-json-data-using-retrofit/</guid>
      <description>이번 포스팅에서는 Retrofit 라이브러리로 HTTP 통신을 수행하는 법에 대해 알아보도록 하겠습니다.
안드로이드에서의 HTTP 통신에 대한 개괄적 설명과 Retrofit을 사용해야 하는 이유에 대해서는 안드로이드의 HTTP 통신 라이브러리 고찰에서 다루었으니 그것을 참조하시면 좋을 것 같습니다. 또한 Retrofit의 기술적 특징에 대해서는 라이브러리 제작자가 설명해 둔 Retrofit 2과 함께하는 정말 쉬운 HTTP 를 보는것이 가장 정확할 것 같습니다.
이 강의에서는 경기데이터드림에서 제공하는 코로나바이러스 감염증 선별진료소 운영 의료기관 현황 API를 통해 가져온 JSON 데이터를 Recyclerview에 표시해보면서 Retrofit을 어떻게 사용하는지 알아보도록 하겠습니다.</description>
    </item>
    
    <item>
      <title>코루틴으로 로또번호 당첨 확인하기</title>
      <link>https://cliearl.github.io/posts/android/lotto-checker/</link>
      <pubDate>Sat, 17 Jul 2021 16:01:01 +0900</pubDate>
      
      <guid>https://cliearl.github.io/posts/android/lotto-checker/</guid>
      <description>이번 포스팅에서는 코루틴을 사용해서 로또번호의 당첨을 확인하는 법에 대해 알아보도록 하겠습니다.
당첨번호 조회하기 이전에 로또번호 생성기 만들기강의에서 로또번호를 생성하는 앱을 만들어보았는데요, 여기서는 이 앱에 코루틴을 이용해서 당첨여부를 확인하는 기능을 추가하도록 하겠습니다. 코루틴에 대한 이론설명은 알기쉬운 코루틴 이론 강의를 참조하시기 바랍니다.
금주의 로또 당첨번호는 동행복권 홈페이지에서 확인할 수 있습니다. 다른 회차의 당첨번호는 홈페이지의 회차별 당첨번호 페이지에서 확인할 수 있게 되어 있습니다.
그런데 이렇게 홈페이지에 접속하지 않고도 당첨번호는 API로 조회할 수 있습니다. 다음 주소의 &amp;ldquo;회차&amp;quot;라고 되어 있는 부분에 확인하고 싶은 회차의 숫자를 넣으시면 됩니다.</description>
    </item>
    
    <item>
      <title>알기쉬운 코루틴 이론</title>
      <link>https://cliearl.github.io/posts/android/coroutine-principle/</link>
      <pubDate>Mon, 28 Jun 2021 22:01:50 +0900</pubDate>
      
      <guid>https://cliearl.github.io/posts/android/coroutine-principle/</guid>
      <description>이번 포스팅에서는 코틀린의 코루틴(Coroutine)에 대해 알아보도록 하겠습니다.
코루틴의 개념 안드로이드에서는 AsyncTask를 이용해서 손쉽게 비동기 프로그래밍을 구현했었지만 구글이 다음과 같이 밝힌 것처럼 메모리 누수등 여러가지 문제가 있었습니다. 그래서 API 30부터는 AsyncTask를 deprecate 시키고 코루틴을 사용하도록 권장하고 있습니다.
 AsyncTask was intended to enable proper and easy use of the UI thread. However, the most common use case was for integrating into UI, and that would cause Context leaks, missed callbacks, or crashes on configuration changes.</description>
    </item>
    
  </channel>
</rss>
