[{"content":"패스워드 매니저는 웹브라우저에서 아이디와 패스워드를 자동으로 넣어주는 프로그램입니다.\n들어가기 저는 패스워드 매니저로 LastPass를 사용하고 있습니다. 과거에 해킹당한 적도 있었지만 그 이후 큰 이슈가 없었고 사용하기 편해서 계속 사용하고 있습니다.\n크롬, 파이어폭스, 사파리, 엣지, 오페라 등의 브라우저에서 작동하며 안드로이드, iOS, 윈도우, 맥을 지원하고 터치ID도 대응하기 때문에 여러 장치사이에서 동기화하며 잘 사용하고 있었습니다\u0026hellip;만 2021년 3월 16일부터 무료이용자에 대한 정책을 변경하였습니다.\n그 내용은 컴퓨터 혹은 모바일 기기 둘 중 하나에서만 자유롭게 사용하게 할 것이고 양쪽 모두에서 사용하고 싶다면 한달에 3달러인 프리미엄 플랜에 가입해야 한다는 것 입니다. 그 덕분에 LastPass 파이어폭스 플러그인은 별점 테러를 먹고 있는 중입니다.\n성능이 나쁘지 않은것도 있었지만 LastPass의 가장 큰 장점 중 하나는 무료로 사용이 가능하다는 점이었기 때문에 갈아탈 때가 된 것 같다는 생각이 들었습니다.\n이것저것 찾아봤는데 복수의 기기에서 무료로 이용할 수 있게 해주는 자비로운 서비스는 존재하지 않았고, 거의 대부분이 서비스를 유로플랜으로 제공하고 있었습니다.\nLastpass 대체서비스    서비스 무료 플랜 파폭 플러그인     Bitwarden 모든 기기, 암호 무제한 있음   Dashlane 기기 한대, 암호 50개 없음   LastPass 기기 한 종류, 암호 무제한 있음   NordPass 모든 기기, 암호 무제한 있음   Roboform 기기 한대, 암호 무제한 있음    이 중 모든기기에서 사용 가능한건 Bitwarden과 NordPass인데 NordPass는 파이어폭스 플러그인의 평이 그리 좋지 않습니다. 거기다 이 서비스도 언제 유료화 할지 모르니 오픈소스로 개발되는 Bitwarden을 사용하기로 결정했습니다. 파이어폭스 플러그인의 평도 좋고 인터넷에서의 평도 나쁘지 않은것 같습니다.\nBitwarden Bitwarden의 경우 세 가지 사용방법이 있습니다\n 공식 홈페이지에서 가입하여 사용 공개된 코드를 개인용 NAS에 Docker 이미지로 설치하여 사용 공식 도커이미지는 서버 요구스펙이 높은데 이 것을 저사양 서버에서도 돌아가도록 개인이 편집한 소스에서 만들어진 도커 이미지로 설치  개인이 쓸 거면 bitwarden_rs 를 사용하는것만으로 아마 충분하겠지만 역시 개인 프로젝트는 언제 어떤식으로 중단될 지 알 수 없고 그 경우 관리상 여러가지 곤란한 점이 생길 수 있습니다.\n현재로서는 소스를 퍼블릭 공개하고 있는 Bitwarden 회사가 나의 패스워드를 함부로 다루지 않을 것이라는 믿음을 가져보기로 했고 그렇다면 보안의 관점에서 볼 때 개인용 NAS에 보관하는 것 보다는 회사 서버에 보관하는 것이 더 낫다고 생각해서 공식 홈페이지에 가입하여 서비스를 사용해 보기로 했습니다.\n또 공식서버에서 운용하다가 뭔가 맘에 안드는 점이 있다면 그때가서 개인 NAS로 옮겨도 될 것 같네요.\n","description":"","id":0,"section":"posts","tags":["lastpass","bitwarden"],"title":"패스워드 매니저 교체기","uri":"http://cliearl.github.io/posts/password-manager/"},{"content":"지금까지 사용하던 녹음환경을 개선하였습니다.\n들어가기 지금까지는 음성녹음을 위해 애플 이어팟을 맥북에 연결하여 마이크로 사용하고 있었습니다.\n핸즈프리인것 치고는 마이크 성능이 나쁘지 않았는데요, 최근 맥북에서 녹음할 때 드라이버 충돌이 있었는지 목욕탕에서 녹음하는것처럼 소리가 울리는 문제가 발생했기에 새로 마이크를 들이기로 했습니다.\n컨셉은 20만원대에서 믹서없이 사용할 수 있는 USB 콘덴서마이크였습니다.\n검토한 마이크들 NT-USB  https://ko.rode.com/microphones/nt-usb 워낙 평도 좋고 가성비도 좋아서 눈여겨보고있던 마이크였는데 최근에 가격이 좀 올랐습니다.  NT-USB Mini  NT-USB에 비하면 해상도가 24비트로 더 높고 연결단자가 USB-C라는 장점이 있으나 팝필터가 내장이라는 점이 별로였네요. 다만 유튜브에서 찾아보니 음질은 나쁘지 않았습니다.  Blue Yeti X  https://www.bluemic.com/ko-kr/products/yeti-x/ 스펙도 훌륭하고 녹음패턴도 4가지나 가지고 있어 게스트를 두고 녹음하는 것도 가능하다. 소리크기에 LED가 반응하는것도 이쁘고 유튜브에서 청음해보니 음질도 좋은 편이다. 마이크 컨트롤용 앱도 잘 만들어놓은것 같았다.  AT-2020USB+  https://www.audio-technica.com/en-us/at2020usb 실 사용기를 보면 폴라패턴이 좀 넓은듯한데 그래도 훌륭한 마이크인것 같다.  그래서 구입한 장비 (뒷광고 아닙니다!) RODE NT-USB  여러가지 비교포인트는 있었는데 마이크별로 극적인 차이는 없었습니다. 결국 바다씨의 speechless를 듣고 NT-USB를 구입해버렸습니다\u0026hellip; 흠\u0026hellip;    아리스노보 UMA-RF03 리플렉션 필터  https://smartstore.naver.com/arsnovo/products/4609145421  환경개선 비교 20만원대 마이크를 2만5천원짜리 핸즈프리와 비교하는것은 이어팟에 너무 가혹한 일이지만 한번 비교를 해보겠습니다.\n  우선은 화이트노이즈가 개선되었습니다. 이어팟은 목소리 자체는 비교적 깨끗하게 잡아주지만, 화이트노이즈가 꽤 큰편인데 로데로 교체하면서 화이트노이즈가 많이 사라졌습니다.\n  이어팟이 옷과 부딪힐때 나는 잡음이 사라졌습니다. 타이핑이나 마우스를 조작하다보면 이어팟의 볼륨조절버튼이 옷에 부딪히면서 바스락거리는 잡음이 수음되곤 했는데 마이크를 암 스탠드에 거치하고 책상과 이격시키면서 옷에서 나는 잡음을 잡았습니다. 또 키보드를 두드릴 때와 마우스를 들었다놨다 할때 책상에 전해지는 소음도 억제할 수 있게 되었습니다.\n  반향음을 억제할 수 있게 되었습니다. 기존에는 무료로 대여할 수 있는 녹음실에서 녹음을 했었는데 이 방은 방음처리가 잘 되어 있어서 외부에서 들어오는 잡음이나 반향음을 신경 쓸 필요가 없었습니다. 그런데 코로나로 녹음실을 사용할 수 없게 되면서 집에서 녹음했더니 반향음이 있었습니다. 하지만 이번에 마이크를 구매하면서 같이 구입한 리플렉션필터 덕분인지 반향음이 잘 잡히게 되었습니다.\n  목소리를 모니터링할수 있게 되었습니다. 이어팟으로 녹음할 때는 어디서 소음이 잡히는지 내 목시리가 어떻게 녹음되고 있는지 알 길이 없었습니다. 하지만 마이크의 모니터링단자에서 목소리를 확인하면서 녹음하니 노이즈가 들어가거나 입이 마이크에서 좀 떨어져있구나 하는 것들을 실시간으로 확인할 수 있어서 작업이 수월해졌습니다.\n  마이크 성능이 좋다보니 ASMR도 됩니다. 마지막으로 서정시 한편을 읽으며 마치겠습니다.\n  어둠에다크에서 죽음의데스를 느끼며\n서쪽에서 불어오는 바람의윈드를 맞았다.\n그것은 운명의데스티니.\n그는 인생의 라이프를 끝내기 위해 디엔드.\n모든것을 옭아매는 폭풍같은 스톰에서 벗어나기 위해\n결국 자신 스스로를 죽음에데스로 몰아갔다.\n후에 전설의 레전드로써 기억에 메모리- 기적에미라클\n길이길이 가슴속의하트에 기억될 리멤버.\n끝에 Fin\n","description":"","id":1,"section":"posts","tags":["mic"],"title":"녹음용 마이크 교체기","uri":"http://cliearl.github.io/posts/changemic/"},{"content":"들어가기 이번 포스트에서는 작성된 코드의 교열을 보는 방법에 대해 알아보도록 하겠습니다.\n우리가 작성하는 코드는 기본적으로는 컴퓨터에게 명령을 내리기 위한 것이고 그 명령은 각 언어의 문법에 따라 작성되어져야 합니다.\n코틀린에서 상수 두 개를 만들고 그 상수를 더하는 명령은 다음과 같이 쓸 수 있습니다.\nval a = 3 val b = 4 val c = a + b println(c) 자 그럼 이번엔 코드 안에서 띄어쓰기의 방식을 다르게 해보겠습니다.\nval a= 3 val b = 4 val c= a+ b println(c) 각 줄마다 띄어쓰기의 방식이 다르다고 해도 컴퓨터는 코드를 문제없이 컴파일 할 수 있습니다.\n그럼 코드를 이렇게 써도 문제없이 작동하니 괜찮은걸까요?\n내가 작성한 코드를 내 동료가 검토할 수도 있고, 몇 년후 내가 더 이상 코드를 관리하지 않게 되었을 때 내 후임이 코드를 읽어야 할 일이 생길 수 있습니다. 또 다음주쯤에 내 스스로가 내가 작성한 코드를 다시 읽어야 할 일도 생길 수 있죠.\n코드는 나와 컴퓨터의 대화이기도 하지만, 나와 다른 사람과의 대화이기도 합니다. 따라서 컴파일이 되게 문법을 맞추는 것 뿐만 아니라, 사람이 보기 좋도록 코드의 구조도 이쁘게 만드는 것이 좋습니다.\n프로그래머들 사이에서는 코드가 이쁘다고 느끼게 하는 어느정도 일반적으로 받아들여지는 정도의 수준이 있고 이걸 정리한 것을 코드 컨벤션이라고 합니다.\nktlint 코드 컨벤션의 형태는 언어별로 다른데 코틀린의 경우 구글에서는 다음과 같은 규약을 정의하고 있습니다.\n https://developer.android.com/kotlin/style-guide https://kotlinlang.org/docs/coding-conventions.html  이 수많은 규약들을 머리에 넣어두고 잘 지킬 수 있다면 문제가 없겠지만 실제 코딩을 하다보면 이런 것들을 모두 신경쓰면서 코드를 쓸 수가 없습니다. 그래서 각 언어에는 린트 혹은 린터라고 불리는 도구가 있습니다.\n린트는 과거에 C언어의 소스코드를 검사하기 위해 만들어진 유틸리티의 이름인데요. 현재는 동일한 작업을 하는 도구들을 모두 린트라고 부르고 있습니다.\n코틀린의 대표적인 린트 툴로는 ktlint, detekt 등이 있는데요, 이번 영상에서는 복잡한 설정을 하지 않고 편하게 사용할 수 있는 ktlint의 사용법에 대해 설명하도록 하겠습니다.\nktlint는 다음과 같은 컨벤션 오류를 체크하고 자동으로 컨벤션에 맞게 코드를 수정해주는 기능이 있습니다\n https://ktlint.github.io/#rules  실제로는 이것뿐만 아니라 체크되는 더 많은 룰이 있습니다.\n https://github.com/pinterest/ktlint#standard-rules  ktlint 사용법 ktlint는 그 자체를 프로젝트에 삽입해서 사용해도 되지만 래퍼 라이브러리를 사용하면 더 간편하게 사용할 수 있습니다. ktlint의 래퍼는 여러가지가 있는데 저는 커밋이 활발하게 이루어지는 다음 라이브러리를 사용하였습니다.\n https://github.com/jlleitschuh/ktlint-gradle  이 라이브러리를 project 레벨의 gradle에 플러그인으로 추가합니다.\nbuildscript {...} plugins { id \u0026quot;org.jlleitschuh.gradle.ktlint\u0026quot; version \u0026quot;10.0.0\u0026quot; } allProjects {...} subprojects { apply plugin: \u0026quot;org.jlleitschuh.gradle.ktlint\u0026quot; } 이렇게 설정하면 프로젝트의 task에 여러가지 작업이 추가됩니다.\n오른쪽 메뉴의 gradle에서 확인가능하며 모든 task의 리스트는 여기서 확인 가능합니다.\n https://github.com/JLLeitschuh/ktlint-gradle#tasks-added  task가 추가되었으면 터미널에서 실행합니다.\n./gradlew ktlintCheck // 로 틀린부분을 체크받고 ./gradlew ktlintFormat // 로 자동수정을 할 수 있습니다. ktlintcheck를 수동으로 수행하는 것이 귀찮다면 다음 명령으로 커밋할때마다 ktlintcheck가 실행되게 할 수 있습니다.\n./gradlew addKtlintCheckGitPreCommitHook ktlint를 이용해서 코드 컨벤션에 맞는 코드를 생산하는 법에 대해 알아보았습니다. 중요한 것은 코드 컨벤션을 지키지 않아도 컴파일은 정상적으로 수행되지만, 이 코드를 언젠가 다시 읽게 될 나와 다른 사람을 위해 코드 컨벤션을 지켜야 한다는 점입니다.\n","description":"","id":2,"section":"posts","tags":["ktlint"],"title":"ktlint로 코틀린 코드 컨벤션 검토하기","uri":"http://cliearl.github.io/posts/ktlint/"},{"content":"기술블로그 엔진을 Hugo에서 Hexo로 바꾸어 보았다.\nHexo에 Icarus 태그를 씌우고 도커에 올려서 잘 쓰고 있었는데 내가 사용한 도커 이미지는 업뎃이 안된다는 문제가 있었다.\nhttps://github.com/spurin/docker-hexo\n그래서 비슷한 엔진인 Hugo를 찾아보았는데 Hugo의 도커 이미지는 관리가 잘 되고 있었다.\nhttps://hub.docker.com/r/klakegg/hugo/\n근데 이상하게도 이 이미지를 비롯한 모든 hugo의 도커 이미지는 내 환경에서 실행이 안됐다. 짜증나기도 하고 이왕 이렇게 된거 로컬에서 실행하기로 했다. 맥북에서 하면 brew를 사용하기 때문에 업뎃도 쉬워서 관리가 편하다. hexo가 brew로 관리가 안된다는 점도 hugo로 온 이유중에 하나. Go를 쓰니까 빠르다는 점은 그렇게까진 다가오지 않았다.\nhugo 초기화 $ brew install hugo // hugo를 인스톨 $ hugo new site [생성할 폴더 이름] 깃 준비 $ cd cliearl.github.io $ git init $ git remote add origin [https://hugo 원본파일을 보관할 저장소] $ git submodule add [https://hugo가 생성한 사이트를 업로드할 저장소] public $ git submodule add [https://github.com/zzossig/hugo-theme-zzo.git] themes/zzo $ git submodule update --init --recursive // 테마가 업데이트 될 경우 반영 글 작성 후 확인 $ hugo new posts/test.md // 새로운 글 작성 $ hugo server -D // localhost:1313에서 만들어진 정적사이트를 확인 페이지 작성 후 업로드 $ hugo -t [테마이름] // 정적사이트 생성 $ cd public $ git add . $ git commit -m \u0026quot;deploy updates\u0026quot; $ git push origin main 커밋 자동화 스크립트 #!/bin/bash echo -e \u0026quot;\\033[0;32mDeploying updates to GitHub...\\033[0m\u0026quot; # Build the project. hugo -t zzo # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=\u0026quot;rebuilding site `date`\u0026quot; if [ $# -eq 1 ] then msg=\u0026quot;$1\u0026quot; fi git commit -m \u0026quot;$msg\u0026quot; # Push source and build repos. git push origin main # Come Back up to the Project Root cd .. # blog 저장소 Commit \u0026amp; Push git add . msg=\u0026quot;rebuilding site `date`\u0026quot; if [ $# -eq 1 ] then msg=\u0026quot;$1\u0026quot; fi git commit -m \u0026quot;$msg\u0026quot; git push origin master ","description":"","id":3,"section":"posts","tags":["hugo","blog"],"title":"Hugo Blog","uri":"http://cliearl.github.io/posts/hugo-blog/"},{"content":"내가 사용하는 파이어폭스 플러그인을 정리해 보았다.\nAuto Tab Discard https://addons.mozilla.org/ko/firefox/addon/auto-tab-discard/\n 안보고 있는 탭을 자동으로 정리해서 메모리 사용량을 줄여줌.  Bitwarden https://addons.mozilla.org/ko/firefox/addon/bitwarden-password-manager/\n 패스워드 매니저.  Clear Cache https://addons.mozilla.org/en-US/firefox/addon/clearcache/\n 캐시삭제 버튼을 만들어 줌.  Dark Reader https://addons.mozilla.org/ko/firefox/addon/darkreader/\n 모든 웹사이트에 다크모드를 적용하여 어둡게 보이도록 함.  Download Filename Encoding https://addons.mozilla.org/ko/firefox/addon/download-filename-encoding/\n 다운로드하는 파일명이 언어 인코딩 때문에 깨지는 것을 방지.  Download Manager (S3) https://addons.mozilla.org/ko/firefox/addon/s3download-statusbar/\n 다운로드 진행상황을 상태표시줄에 표시해줌.  DownThemAll! https://addons.mozilla.org/ko/firefox/addon/downthemall/\n 대량의 파일을 다운로드해주는 관리자.  Enhancer for YouTube https://addons.mozilla.org/ko/firefox/addon/enhancer-for-youtube/\n 유튜브 영상의 반복, 고정등 여러가지 기능을 추가해 줌.  Flagfox https://addons.mozilla.org/ko/firefox/addon/flagfox/\n 현재 접속중인 서버의 위치를 국기로 표시해 줌.  Gesturefy https://addons.mozilla.org/ko/firefox/addon/gesturefy/\n 마우스 제스처로 브라우저를 조작할 수 있게 함.  Google search link fix https://addons.mozilla.org/ko/firefox/addon/google-search-link-fix/\n 구글을 통해 검색한 사이트의 링크를 복사할 때 구글 리퍼러가 붙는것을 막아줌.  Happy Right-Click https://addons.mozilla.org/ko/firefox/addon/%E5%BF%AB%E4%B9%90%E5%8F%B3%E9%94%AE/\n 마우스 오른쪽 버튼이 막혀있는 사이트를 풀어줌.  Imagus https://addons.mozilla.org/ko/firefox/addon/imagus/\n 이미지나 동영상에 커서를 갖다 대었을 때 호버링으로 크게 보여줌.  ImTranslator https://addons.mozilla.org/ko/firefox/addon/imtranslator/\n 팝업 형태로 번역기를 사용할 수 있게 해줌.  Open With https://addons.mozilla.org/ko/firefox/addon/open-with/\n 현재 보고있는 웹페이지를 다른 브라우저로 띄워줌.  Print Edit WE https://addons.mozilla.org/ko/firefox/addon/print-edit-we/\n 웹 페이지에서 자신이 원하는 부분만 잘라내서 프린트하도록 도와줌.  Quick Dial https://addons.mozilla.org/ko/firefox/addon/quick-dial/\n 시작 페이지에 자주가는 웹사이트를 버튼형태로 표시해 줌.  Toolbar Clock https://addons.mozilla.org/ko/firefox/addon/toolbar-clock/\n 상태표시줄에 아날로그 시계를 표시해 줌.  Top and Bottom scroll buttons https://addons.mozilla.org/ko/firefox/addon/top-and-bottom-scroll-buttons/\n 사이트의 맨 위 / 맨 아래로 이동하는 버튼을 표시.  uBlock Origin https://addons.mozilla.org/ko/firefox/addon/ublock-origin/\n 자원을 덜 먹는다고 선전하는 광고차단기.  Undo Close Tab https://addons.mozilla.org/ko/firefox/addon/undoclosetabbutton/\n 최근에 닫은 탭을 다시 여는 버튼을 표시.  View Image https://addons.mozilla.org/ko/firefox/addon/view-image/\n 구글에서 이미지를 검색할 때 이미지 보기 버튼을 추가함.  Wappalyzer https://addons.mozilla.org/ko/firefox/addon/wappalyzer/\n 현재 보는 중인 사이트애 적용된 웹 기술을 보여줌.  weAutoPagerize https://addons.mozilla.org/ko/firefox/addon/weautopagerize/\n 현재 보고있는 페이지의 다음 페이지를 미리 읽어서 현재 페이지에 연결시켜줌.  Zoom Page WE https://addons.mozilla.org/ko/firefox/addon/zoom-page-we/\n 페이지 줌을 편하게 할 수 있는 버튼을 추가함.  Zotero Connector https://www.zotero.org/download/\n 서지정보 관리 프로그램인 Zotero와 브라우저를 연동시켜 줌. ","description":"","id":4,"section":"posts","tags":["firefox","plugin"],"title":"내가 사용하는 Firefox Plugin","uri":"http://cliearl.github.io/posts/firefox-plugin/"},{"content":"윈도우, Mac, 스마트폰에서 모두 사용할 수 있는 메모 앱을 찾아봤다. 마크다운 포맷을 사용할 수 있으면서 메모를 디렉토리로 관리할 수 있을 것이 조건이었다.\n스탠드얼론 앱 iOS 메모 앱 https://support.apple.com/ko-kr/HT205773\n아이폰을 사용하고 있기에 처음에는 아이폰의 메모 앱을 사용해 봤으나 별 기능도 없고 아이클라우드환경은 윈도우 환경에서 싱크할 수가 없다는 한계가 있었다.\nGoogle Keep https://apps.apple.com/us/app/google-keep-notes-and-lists/id1029207872\n구글 생태계에서 사용할 수 있는 메모 앱. 워드프로세서로 사용하는 느낌이 아닌 포스트잇 같은 느낌으로 사용한다. 개인적 용도와는 맞지않아서 패스함.\nSynology Note Station https://www.synology.com/en-us/dsm/feature/note_station\n시놀로지를 운영할 경우 사용할 수 있는 솔루션. 디렉토리 구성으로 되어있고 필기도 할 수 있는데 초기 로그인 화면이 크게 나타나는게 팬시하지 않고 데이터 싱크가 느리다.\njoplin https://github.com/laurent22/joplin\niOS, 안드로이드, 윈도우, Mac, 리눅스에서 사용할 수 있는 앱을 제공하며 DB는 webdav로 싱크할 수 있다. 메모는 디렉토리로 관리할 수 있다. 오픈소스로 활발하게 업데이트가 이루어진다. 딱 하나 단점은 웹앱이 없어서 브라우저에서 접근이 안된다는 것.\n웹 앱 오픈소스이며 액티브하게 갱신되고 도커이미지가 있는 것을 기준으로 하여 실제로 써본 것들만을 소개한다.\nTrillium Notes https://github.com/zadam/trilium\n자바스크립트로 만들어진 앱. 마크다운 스크립트를 입력하면 실시간으로 화면에 반영되는 위지위그 방식. 메모를 디렉토리 기준으로 관리하며 글만이 아니라 관계도도 그릴 수 있고 암튼 사용할 수 있는 문서형태가 다양하다.\nBookStack https://github.com/BookStackApp/BookStack\nPHP와 라라벨로 만들어진 앱. 메모를 서고와 서가형태로 관리하는데 개인적으로는 이 부분이 직관적으로 느껴지지 않아서 적응하지 못했다.\nWiki.js https://github.com/Requarks/wiki\nNode.js로 만들어진 앱. 메모를 디렉토리 구조로 관리하며 퍼포먼스도 나쁘지 않아 현재 주력으로 사용중.\n","description":"","id":5,"section":"posts","tags":["google keep","synology","note station","note app","joplin","bookstack","wiki.js"],"title":"노트 앱 정착기","uri":"http://cliearl.github.io/posts/finding-note-app/"},{"content":"작업환경에서 사용하는 폰트에 대하여 정리해 보았다.\n텍스트 에디터용 폰트 메모장, 워드, 파워포인트, 한글 등에서 한국어, 영어, 일본어를 모두 표시할 수 있는 폰트가 필요하다.\nGoogle Noto Fonts   어도비와 구글이 합작하여 본고딕이라는 폰트를 출시했다. https://blog.typekit.com/alternate/source-han-sans-kor/\n  이 폰트는 구글에서 Noto Fonts라는 이름으로 풀었다.\n  다운로드 https://www.google.com/get/noto/help/cjk/\n  KoPubWorld  한국출판인회의에서 전자출판에 특화된 서체를 풀었다. 다운로드 http://www.kopus.org/Biz/electronic/Font.aspx  네이버 나눔폰트  네이버에서 나눔시리즈 폰트를 풀었다. 다운로드 https://hangeul.naver.com/2017/nanum  코딩용 폰트 코딩용 폰트에 요구되는 사항들\n 문자열을 스페이스단위로 일치시켜야 하므로 폰트가 고정폭(Monospaced)이어야 한다. 오인식하기 쉬운 알파벳, 특수문자에 대한 대책이 있어야 한다. 특수문자의 가독성을 높여준다고 하는 Ligature는 필수는 아니다. 한글이 깨끗하게 나오면 좋지만 영문체보다 중요하진 않다  개인적으로 괜찮다 생각하는 폰트 (알파벳순)  Consolas 마이크로소프트 개발. D2Coding 네이버 개발. 다닥다닥 붙어있는 느낌. 리가쳐 지원. Fira Code 리가쳐가 이쁘게 나옴. Hack 동글동글한 폰트. IBM Plex Mono IBM 개발. 정렬과 각을 강조. Inconsolata 동글하면서도 살짝 딱딱. Input Mono Inconsolata보다 폭이 약간 넓고 굵음. JetBrains Mono 젯브레인 개발. 아래위로 긴 느낌. 리가쳐 지원. Menlo 애플 개발. Myrica 일본어 코딩용. Source Code Pro 어도비 개발. 글씨폭이 넓고 아래위로 납작한 편. Ubuntu Mono 캐노니컬 개발.  폰트 확인 사이트  Programming Fonts Programming font comparison ","description":"","id":6,"section":"posts","tags":["font","google noto fonts","KoPubWorld","Naver Nanum font"],"title":"작업용 폰트 정보 정리","uri":"http://cliearl.github.io/posts/fonts-for-work/"},{"content":"내가 사용하는 VS Code의 settings.json 내용\n{ \u0026quot;files.autoSave\u0026quot;: \u0026quot;afterDelay\u0026quot;, \u0026quot;editor.fontSize\u0026quot;: 18, \u0026quot;editor.fontFamily\u0026quot;: \u0026quot;'Fira Code', 'Noto Sans CJK KR'\u0026quot;, \u0026quot;editor.fontLigatures\u0026quot;: false, \u0026quot;editor.renderWhitespace\u0026quot;: \u0026quot;boundary\u0026quot;, \u0026quot;editor.wordWrap\u0026quot;: \u0026quot;on\u0026quot;, \u0026quot;editor.wrappingIndent\u0026quot;: \u0026quot;indent\u0026quot;, \u0026quot;editor.rulers\u0026quot;: [ 100, 120 ], \u0026quot;editor.formatOnSave\u0026quot;: true, \u0026quot;git.autofetch\u0026quot;: true, \u0026quot;git.confirmSync\u0026quot;: false, \u0026quot;git.postCommitCommand\u0026quot;: \u0026quot;none\u0026quot;, \u0026quot;python.formatting.provider\u0026quot;: \u0026quot;black\u0026quot;, \u0026quot;python.languageServer\u0026quot;: \u0026quot;Microsoft\u0026quot;, \u0026quot;python.linting.pylintEnabled\u0026quot;: false, \u0026quot;python.linting.pylintPath\u0026quot;: \u0026quot;pylint\u0026quot;, \u0026quot;terminal.integrated.shell.windows\u0026quot;: \u0026quot;C:\\\\WINDOWS\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\u0026quot;, \u0026quot;code-runner.runInTerminal\u0026quot;: true, \u0026quot;code-runner.executorMap\u0026quot;: { \u0026quot;javascript\u0026quot;: \u0026quot;node\u0026quot;, \u0026quot;php\u0026quot;: \u0026quot;php\u0026quot;, \u0026quot;python\u0026quot;: \u0026quot;$pythonPath -u $fullFileName\u0026quot;, \u0026quot;perl\u0026quot;: \u0026quot;perl\u0026quot;, \u0026quot;ruby\u0026quot;: \u0026quot;ruby\u0026quot;, \u0026quot;go\u0026quot;: \u0026quot;go run\u0026quot;, \u0026quot;html\u0026quot;: \u0026quot;\\\u0026quot;C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\\\u0026quot;\u0026quot;, \u0026quot;java\u0026quot;: \u0026quot;cd $dir \u0026amp;\u0026amp; javac $fileName \u0026amp;\u0026amp; java $fileNameWithoutExt\u0026quot;, \u0026quot;c\u0026quot;: \u0026quot;cd $dir \u0026amp;\u0026amp; gcc $fileName -o $fileNameWithoutExt \u0026amp;\u0026amp; $dir$fileNameWithoutExt\u0026quot;, \u0026quot;cpp\u0026quot;: \u0026quot;cd $dir \u0026amp;\u0026amp; g++ -std=c++14 $fileName -o $fileNameWithoutExt \u0026amp;\u0026amp; $dir$fileNameWithoutExt\u0026quot; }, \u0026quot;editor.suggestSelection\u0026quot;: \u0026quot;first\u0026quot;, \u0026quot;vsintellicode.modify.editor.suggestSelection\u0026quot;: \u0026quot;automaticallyOverrodeDefaultValue\u0026quot;, } ","description":"","id":7,"section":"posts","tags":["VS Code","settings.json"],"title":"내가 사용하는 VS Code settings.json","uri":"http://cliearl.github.io/posts/vscode-settings-json/"},{"content":"윈도우 환경에서 VS Code에 파이썬 가상환경 설정하고 사용하는 법에 대해 정리했다.\nvenv 환경 작성  작업폴더를 연 뒤 터미널에서 다음 값 입력  $ python3 -m venv .venv   상태표시줄의 파이썬을 눌러 ('.venv')인 python을 선택\n  다음 명령어로 가상환경을 활성화 후 패키지 설치\n  윈도우 macOS  .venv\\\\scripts\\\\activate   source .venv/bin/activate     'use strict'; var containerId = JSON.parse(\"\\\"f3a9b3a304650797\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  code-runner를 실행하기 위한 settings.json 설정 윈도우 macOS  \u0026quot;python.pythonPath\u0026quot;: \u0026quot;blahblah\\\\.venv\\\\Script\\\\python.exe\u0026quot;,   \u0026quot;python.pythonPath\u0026quot;: \u0026quot;.venv/bin/python\u0026quot;,     'use strict'; var containerId = JSON.parse(\"\\\"a08a452ff5480719\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; } ","description":"","id":8,"section":"posts","tags":["python","virtualenv"],"title":"VSCODE에서 Python VirtualEnv 환경설정하기","uri":"http://cliearl.github.io/posts/python-virtualenv-settings/"},{"content":"시놀로지에서 도커 이미지를 업데이트하는 법에 대해 정리하였다.\n  도커패널 \u0026gt; 컨테이너 \u0026gt; 업데이트할 컨테이너 선택후 [작업 -\u0026gt; 중지]\n  도커패널 \u0026gt; 레지스트리 \u0026gt; 업데이트할 이미지 찾아서 [다운로드]\n(이전 다운로드 받은 이미지(image) 삭제 하지 않아도 됨)\n  도커패널 \u0026gt; 업데이트할 컨테이너 선택후 [작업 -\u0026gt; 지우기]\n(이전 설정은 지워지지 않음)\n  도커패널 \u0026gt; 업데이트할 컨테이너 선택후 [작업 -\u0026gt; 시작점]\n ","description":"","id":9,"section":"posts","tags":["synology","docker","update"],"title":"시놀로지 도커 이미지 업데이트하기","uri":"http://cliearl.github.io/posts/synology-docker-update/"},{"content":"내가 사용하는 VS Code의 extension에 대해 정리해보았다.\nActive File In StatusBar  현재 편집하고 있는 파일의 위치를 상태바에 표시.  C/C++  C/C++ 지원  Code Runner  코드 실행을 도와줌. settings.json에 다음 내용을 추가.  \u0026quot;code-runner.executorMap\u0026quot;: { \u0026quot;javascript\u0026quot;: \u0026quot;node\u0026quot;, \u0026quot;php\u0026quot;: \u0026quot;php\u0026quot;, \u0026quot;python\u0026quot;: \u0026quot;$pythonPath -u $fullFileName\u0026quot;, \u0026quot;perl\u0026quot;: \u0026quot;perl\u0026quot;, \u0026quot;ruby\u0026quot;: \u0026quot;ruby\u0026quot;, \u0026quot;go\u0026quot;: \u0026quot;go run\u0026quot;, \u0026quot;html\u0026quot;: \u0026quot;\\\u0026quot;C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\\\u0026quot;\u0026quot;, \u0026quot;java\u0026quot;: \u0026quot;cd $dir \u0026amp;\u0026amp; javac $fileName \u0026amp;\u0026amp; java $fileNameWithoutExt\u0026quot;, \u0026quot;c\u0026quot;: \u0026quot;cd $dir \u0026amp;\u0026amp; gcc $fileName -o $fileNameWithoutExt \u0026amp;\u0026amp; $dir$fileNameWithoutExt\u0026quot;, \u0026quot;cpp\u0026quot;: \u0026quot;cd $dir \u0026amp;\u0026amp; g++ -std=c++14 $fileName -o $fileNameWithoutExt \u0026amp;\u0026amp; $dir$fileNameWithoutExt\u0026quot; }, CodeMap  탐색창에 파일 속 클래스나 함수구조를 보여줌  Excel Viewer  View Excel spreadsheets and CSV files within Visual Studio Code workspaces.  Git Graph  View a Git Graph of your repository, and perform Git actions from the graph.  indent-rainbow  This extension colorizes the indentation in front of your text alternating four different colors on each step. Some may find it helpful in writing code for Nim or Python.  Kotlin Language  Kotlin language support for VS Code  LaTeX Workshop  Boost LaTeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.  Maintained Swift Development Environment  New home of Swift Development Environment for VS Code  Markdown All in One  All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)  PlantUML  Rich PlantUML support for Visual Studio Code.  Path Autocomplete  Provides path completion for visual studio code.  Python  A Visual Studio Code extension with rich support for the Python language (for all actively supported versions of the language: 2.7, \u0026gt;=3.4), including features such as linting, debugging, IntelliSense, code navigation, code formatting, refactoring, unit tests, snippets, and more!  Settings Sync  Synchronize Settings, Snippets, Themes, File Icons, Launch, Keybindings, Workspaces and Extensions Across Multiple Machines Using GitHub Gist.  Todo Tree  Show TODO, FIXME, etc. comment tags in a tree view  Visual Studio IntelliCode  AI-assisted development  vscode-icons  Icons for Visual Studio Code ","description":"","id":10,"section":"posts","tags":["VS Code","extension","plugin"],"title":"내가 사용하는 VS Code Extensions","uri":"http://cliearl.github.io/posts/vscode-extensions/"},{"content":"도커로 Hexo 블로그를 만들고 github.io 주소로 접속하도록 해 보았다.\n개인적으로 사용하고 있는 텍큐 블로그가 있는데 기술관련 내용을 쓰기는 너무 불편하고 오래되기도 해서 마크다운으로 사용할 수 있는 블로그 툴을 찾아봤다.\n처음엔 입출력 속도만 개선해보려고 PHP 버전을 5.6에서 7.3으로 올려봤는데 텍큐가 너무 오래되다보니 패치를 해도 잘 안돌아가고 해서 v7로 올리는 건 포기.\n그 다음으로는 업뎃 잘되는 워드프레스에 텍스트큐브의 블로그 내용을 다 옮기고 기술내용도 거기서 다 같이 쓸려고 했다.\n그래서 TTXML Importer로 데이터를 옮겨봤는데 글만 옮겨지고 그외 카운터 정보같은건 옮길 수가 없었다.\n어차피 블로그를 깔끔하게 옮길 수 없다면 기술블로그 전용 툴을 쓰자 해서 찾은게 Ghost인데 얘는 카테고리나 사이드바 기능이 부족해서 탈락시켰다.\n그 다음으로 찾은 선택지는 정적 사이트 생성기를 이용하는 거였다. 마크다운 쓰기도 좋고, github.io 주소도 사용할 수 있으니 괜찮아보였다. 그래서 찾아보니 Jekyll에는 맘에 드는 스킨이 없어서 Hexo에 Icarus라는 테마를 붙여 써보기로 했다.\n근데 정적 사이트 생성기는 소스를 로컬에 보관하고 github.io로 퍼블리시하는 구조라, 모든 컴퓨터에 Hexo 소스를 보관할 필요가 있다. 이건 너무 바보같아서 Hexo 소스는 도커로 웹에 띄우고 이놈으로부터 github.io에 퍼블리싱하는 방법을 쓰기로 했다. 굳이 따지면 웹에 띄운 시점에서 바로 접속이 가능하니 굳이 퍼블리시를 할 필요는 없는거긴 한데 사이트를 매번 변환하는것보다는 당연히 변환된 저장소에 접속하는 편이 빠르고 무엇보다 github.io 주소를 쓰는 편이 더 geek하기 때문에 사용하기로 했다.\n그래서 이 포스트에서는 리눅스 서버에 도커로 Hexo를 띄우고, Hexo-admin 플러그인으로 퍼블리시한 파일을 github.io에 deploy하여 최종적으로는 유저명.github.io로 정적 블로그를 구축하는 법을 설명한다.\ngithub repository 생성  https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/creating-a-github-pages-site 깃헙에 유저명.github.io라는 저장소 생성 이때 속성은 Public, Initialize this repository with a README를 선택 생성된 저장소의 settings → GitHub Pages → Theme Chooser 에서 테마를 아무거나 하나 골라주면 블로그가 가동됨 Your site is published at https://유저명.github.io/ 메시지가 뜨면 접속가능하게 된거임  도커 이미지 선정  https://github.com/spurin/docker-hexo Hexo와 관리용 Hexo-admin이 포함되어 있는 이미지  icarus 테마 셋업 # ssh로 접속 sudo su - docker ps # 현재 실행중인 컨테이너 확인 docker exec -it xxxxxxxxxxxx /bin/bash # 컨테이너에 접속 git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus # 테마 의존성 패키지 일괄설치 npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 hexo-component-inferno@^0.10.1 inferno@^7.3.3 inferno-create-element@^7.3.3 # _config.yml의 theme가 landscape인데 icarus로 수정 hexo-admin에 패스워드 설정  Settings \u0026gt; Setup authentification에서 YAML을 생성 _config.yml의 admin: 밑에 붙여넣는다  hexo-admin에서 deploy 설정  https://github.com/jaredly/hexo-admin/issues/70 sh파일을 만들고 yml 파일을 수정한다  npm install --save hexo-deployer-git # git 배포용 플러그인 설치 touch hexo-deploy.sh; chmod a+x hexo-deploy.sh #!/usr/bin/env sh hexo clean hexo deploy # _config.yml을 수정 deploy: type: git repo: https://계정:패스워드@github.com/저장소.git admin: deployCommand: './hexo-deploy.sh' 유용한 플러그인 hexo-deployer-git  git으로 배포하기 위한 플러그인  # 설치 npm install hexo-deployer-git --save hexo-generator-feed  atom(url/atom.xml ) 혹은 rss2.0(url/rss2.xml)으로 피드 생성해 줌  # 설치 npm install hexo-generator-feed --save # _config.yml 파일 끝에 다음 행 추가 feed: enable: true type: rss2 path: rss2.xml limit: 20 hexo-generator-sitemap  sitemap.xml 파일을 자동생성  # 설치 npm install hexo-generator-sitemap --save # _config.yml 파일 맨 끝에 다음 행 추가 sitemap: path: sitemap.xml hexo-math  KaTeX and MathJax를 활성화 시켜주는 플러그인 플러그인 설치  # 설치 npm install hexo-math --save  사용예  {% mathjax %} \\frac{1}{x^2-1} {% endmathjax %} ","description":"","id":11,"section":"posts","tags":["docker","hexo","github.io","blog"],"title":"도커로 Hexo 블로그 만들고 github.io 주소로 접속하기","uri":"http://cliearl.github.io/posts/docker-hexo-blog/"},{"content":" 도연초 [제 150단]\n이제부터 예술을 익히려는 사람은 일단 \u0026ldquo;못하니까 다른 사람에게 보여주고 싶지 않다. 남몰래 연습해서, 어느정도 볼만하게 되면 보여주는게 멋있다\u0026quot;라고 말하게 되지만, 그런 말을 하는 사람이 최종적으로 성공한 예는 하나도 없다.\n아직 미숙하고 못할 때부터, 베테랑에다 잘하는 사람과 섞여서 바보 취급 당하고 비웃음을 받고 그래도 부끄러워하지 않고 열심히 하면, 특별한 재능이 없어도 잘 하게 된다. 길을 벗어나거나, 아류에 고집하는 일도 없을 것이다. 그대로 연습을 계속하면 그런 태도를 바보취급한 사람들을 아득히 뛰어넘어 달인이 되어간다. 인간적으로도 성장하게 되고, 주변으로부터 존경을 받게 된다.\n지금은 \u0026ldquo;천하에 비길 자 없다\u0026quot;라고 불리는 사람도 처음엔 비웃음당하고, 욕을 먹고, 굴욕을 맛보았다. 그래도 그 사람이 올바르게 배우고, 그 길을 한걸음 한걸음 계속 전진한 덕분에, 많은 사람들이 그 가르침을 받을 수 있게 되었다. 어떠한 세계든지, 똑같은 것이다.\n  \u0026ldquo;No pessimist ever discovered the secret of the stars, or sailed to an uncharted land, or opened a new doorway for the human spirit.\u0026rdquo; — Hellen Keller\n  \u0026ldquo;We are what we repeatedly do. Excellence, then, is not an act, but a habit.\u0026rdquo; — Will Durant\n  \u0026ldquo;Excellence is never an accident. It is always the result of high intention, sincere effort, and intelligent execution; it represents the wise choice of many alternatives - choice, not chance, determines your destiny.\u0026rdquo; ― Aristotle\n  \u0026ldquo;One must live the way one thinks or end up thinking the way one has lived.\u0026rdquo; ― Paul Bourget\n ","description":"About Page","id":12,"section":"","tags":null,"title":"About","uri":"http://cliearl.github.io/about/"}]