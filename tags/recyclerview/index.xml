<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>recyclerview on 냉동코더의 기술블로그</title>
    <link>https://cliearl.github.io/tags/recyclerview/</link>
    <description>Recent content in recyclerview on 냉동코더의 기술블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 31 Jul 2021 21:22:17 +0900</lastBuildDate><atom:link href="https://cliearl.github.io/tags/recyclerview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DiffUtil과 ListAdapter 이해하고 RecyclerView에 적용하기</title>
      <link>https://cliearl.github.io/posts/android/recyclerview-listadapter/</link>
      <pubDate>Sat, 31 Jul 2021 21:22:17 +0900</pubDate>
      
      <guid>https://cliearl.github.io/posts/android/recyclerview-listadapter/</guid>
      <description>이번 포스팅에서는 RecyclerView에 ListAdapter를 적용하는 법에 대해 알아보도록 하겠습니다.
들어가기 리사이클러뷰의 데이터가 변하면 리사이클러뷰 어댑터가 제공하는 notifyItem 메소드를 사용해서 뷰홀더 내용을 갱신할 수 있습니다.
notifyItemChanged(int) notifyItemInserted(int) notifyItemRemoved(int) notifyItemRangeChanged(int, int) notifyItemRangeInserted(int, int) notifyItemRangeRemoved(int, int) 그런데 데이터가 변경되는 방식을 확인하고 그때마다 이렇게 notify를 일일이 해 주는것은 번거롭기도 하고, 또 사용하기에 따라서는 갱신이 필요없는 뷰홀더를 같이 갱신하는 불필요한 작업이 생길수도 있습니다.
DiffUtil DiffUtil은 두 데이터셋을 받아서 그 차이를 계산해주는 클래스입니다. DiffUtil을 사용하면 두 데이터 셋을 비교한 뒤 그중 변한부분만을 파악하여 리사이클러뷰에 반영할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Assets 폴더에서 로딩한 json 파일 Recyclerview에 표시하기</title>
      <link>https://cliearl.github.io/posts/android/assets-json-recycler/</link>
      <pubDate>Wed, 05 May 2021 23:05:14 +0900</pubDate>
      
      <guid>https://cliearl.github.io/posts/android/assets-json-recycler/</guid>
      <description>&lt;p&gt;이번 포스팅에서는 Assets 폴더를 사용하는 법에 대해 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RecyclerView를 Swipe, Drag, Touch하기</title>
      <link>https://cliearl.github.io/posts/android/recyclerview-touch/</link>
      <pubDate>Sun, 18 Apr 2021 22:40:04 +0900</pubDate>
      
      <guid>https://cliearl.github.io/posts/android/recyclerview-touch/</guid>
      <description>이번 포스팅에서는 RecyclerView에 Swipe, Drag, Touch 동작을 연결하는 법에 대해 알아보도록 하겠습니다.
이번에 만들어볼 앱에서는 뷰홀더를 스와이프하면 삭제가 되고, 잡고 끌면 위아래로 뷰홀더를 이동할 수 있으며, 뷰홀더를 터치하면 그 내용이 변하는 동작을 수행하도록 하겠습니다.
여기서는 제가 RecyclerView에 View Binding 적용하기 강의에서 만들었던 리사이클러뷰 앱을 수정하는 방식으로 구현해보겠습니다.
리팩토링 뷰바인딩은 다음과 같이 사용하도록 변경합니다.
android { buildFeatures.viewBinding true } 메인액티비티에서 만들어주던 dataSet은 초기화시 데이터를 바로 입력하도록 하고 리사이클러뷰 어댑터 안쪽으로 이동시키고 받아오는 파라미터를 삭제합니다.</description>
    </item>
    
    <item>
      <title>앱에서 RecyclerView 사용하기</title>
      <link>https://cliearl.github.io/posts/android/recyclerview-implement/</link>
      <pubDate>Sat, 17 Apr 2021 22:43:43 +0900</pubDate>
      
      <guid>https://cliearl.github.io/posts/android/recyclerview-implement/</guid>
      <description>이번 포스팅에서는 리사이클러뷰를 사용하는 법에 대해 알아보도록 하겠습니다.
리사이클러뷰의 특징 리사이클러뷰는 화면에 리스트 형식의 데이터를 표시하기 위해서 사용하는 모듈입니다. 보통 화면에 리스트뷰를 표시할수 있게 하는 리스트뷰는 예를들어 데이터가 10개 있을 경우 데이터를 표시하기 위한 뷰홀더가 10개 필요합니다. 그러나 리사이클러뷰는 뷰홀더를 6개만 만들고 화면에는 5개를 표시한 후 화면 바깥으로 1번 뷰홀더가 빠져나가면 7번 뷰홀더로 변경해서 재사용합니다. 그래서 자원을 더 아낄 수 있게 되는 것이죠.
또 데이터는 리사이클러뷰 어댑터를 통해 뷰홀더에 들어가게 되는데 뷰홀더에 데이터 1을 넣어서 표현했을 경우, 뷰홀더는 그대로 놔두고 데이터 2를 넣는 식으로 뷰홀더를 재활용해서 사용할 수 있습니다.</description>
    </item>
    
    <item>
      <title>RecyclerView에 View Binding 적용하기</title>
      <link>https://cliearl.github.io/posts/android/viewbinding-recyclerview/</link>
      <pubDate>Sat, 17 Apr 2021 22:43:04 +0900</pubDate>
      
      <guid>https://cliearl.github.io/posts/android/viewbinding-recyclerview/</guid>
      <description>이번 포스팅에서는 RecyclerView에 View Binding을 적용하는 법에 대해 알아보도록 하겠습니다.
View Binding을 사용해야 하는 이유나 그 장점에 대해서는 findViewById 대신 View Binding 사용하기 포스팅과 유튜브 강의를 참조하시고 이번 포스팅에선 변환하는 방법에 대해서만 설명하도록 하겠습니다. 이번 포스팅에서 변환에 사용한 프로젝트는 앱에서 RecyclerView 사용하기 포스팅에서 작성한 것을 사용하도록 하겠습니다.
코드 작성 View Binding 활성화 우선은 gradle에서 kotlin-android-extensions 플러그인을 삭제하고 View Binding을 활성화합니다.
plugins { // id &amp;#39;kotlin-android-extensions&amp;#39; } android { buildFeatures.viewBinding true } 메인액티비티 수정 다음은 메인액티비티를 수정해줍니다.</description>
    </item>
    
    <item>
      <title>Data class 이해하고 RecyclerView에서 사용하기</title>
      <link>https://cliearl.github.io/posts/android/dataclass-recyclerview/</link>
      <pubDate>Tue, 06 Apr 2021 21:34:00 +0900</pubDate>
      
      <guid>https://cliearl.github.io/posts/android/dataclass-recyclerview/</guid>
      <description>이번 포스팅에서는 Data class를 사용하는 법에 대해 알아보도록 하겠습니다.
Data class의 특징 toString 코틀린에서 클래스를 만들 때는 자바의 클래스 스펙에 따라서 toString, equals, hashCode라는 메소드를 구현해주어야 합니다. 우선 Person이라는 클래스를 만들고 그 인스턴스를 출력해 보겠습니다. 그러면 Person@랜덤 이라는 값이 출력이 되게 됩니다.
class Person(var name: String, var age: Int, var sex: String) val person1 = Person(&amp;#34;Alice&amp;#34;, 20, &amp;#34;Female&amp;#34;) println(person1) // 출력값 org.jetbrains.kotlin.idea.scratch.generated.ScratchFileRunnerGenerated$ScratchFileRunnerGenerated$Person@b6587368 이제 클래스의 toString을 다음과 같이 오버라이드 해주면 랜덤값이 아니라 클래스가 가진 프로퍼티값을 보여주게 됩니다.</description>
    </item>
    
  </channel>
</rss>
