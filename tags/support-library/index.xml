<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Support Library on 냉동코더의 기술블로그</title>
        <link>https://cliearl.github.io/tags/support-library/</link>
        <description>Recent content in Support Library on 냉동코더의 기술블로그</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sun, 21 Nov 2021 10:55:30 +0900</lastBuildDate><atom:link href="https://cliearl.github.io/tags/support-library/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Support Library와 Androidx와 Jetpack</title>
        <link>https://cliearl.github.io/posts/android/support-library-androidx-jetpack/</link>
        <pubDate>Sun, 21 Nov 2021 10:55:30 +0900</pubDate>
        
        <guid>https://cliearl.github.io/posts/android/support-library-androidx-jetpack/</guid>
        <description>&lt;h2 id=&#34;support-library&#34;&gt;
    &lt;a href=&#34;#support-library&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Support Library
&lt;/h2&gt;&lt;h3 id=&#34;support-library의-필요성&#34;&gt;
    &lt;a href=&#34;#support-library%ec%9d%98-%ed%95%84%ec%9a%94%ec%84%b1&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Support Library의 필요성
&lt;/h3&gt;&lt;p&gt;구글에서는 Android API의 하위 호환성 문제를 해결하기 위해 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/topic/libraries/support-library&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Support Library&lt;/a&gt;를 만들었습니다. 예를들어 롤리팝(API 21)부터 도입된 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/jetpack/androidx/releases/recyclerview&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RecyclerView&lt;/a&gt;는 API 21 이하의 기기에서는 사용할 수 없지만 다음 서포트 라이브러리를 추가하면 API 7 이상의 기기부터 RecyclerView를 사용할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;com.android.support:recyclerview-v7:28.0.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;com.android.support&lt;/code&gt;로 시작하는 서포트 라이브러리는 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/reference/android/support/packages&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;수많은 종류&lt;/a&gt;가 준비되어 있습니다. 이중에는 v4, v7, v13 등 v가 붙은 패키지들이 있는데요, 이것들은 각각 사용가능한 최소 API 레벨을 의미합니다. 예를들어 v4가 붙어있으면 API 레벨 4부터 이용할 수 있는 라이브러리라는 의미이지요.&lt;/p&gt;
&lt;h3 id=&#34;support-library의-문제점&#34;&gt;
    &lt;a href=&#34;#support-library%ec%9d%98-%eb%ac%b8%ec%a0%9c%ec%a0%90&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Support Library의 문제점
&lt;/h3&gt;&lt;p&gt;그런데 Support Library에는 몇가지 문제점이 있었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;최소지원 API레벨 문제
구글은 2017년 Google I/O 세션인 &lt;a class=&#34;link&#34; href=&#34;https://youtu.be/V6-roIeNUY0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What&amp;rsquo;s new in Android Support Library&lt;/a&gt;에서 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/topic/libraries/support-library/revisions#26-0-0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Support Library version 26.0.0&lt;/a&gt; 부터는 최소지원 API 레벨을 Android 4.0 (API level 14)으로 올리겠다는 발표를 합니다. 너무 오래된 기종들의 사용을 막기 위해 취한 조치이긴 하나, 이로인해 라이브러리 이름에 v7이 붙어있어도 최소지원 API 레벨은 14인 이상한 현상이 발생하게 된 것입니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;필요없는 라이브러리의 추가
Support Library는 수많은 API들을 통합한 라이브러리이기 때문에 내가 사용하지 않는 기능도 같이 앱에 포함되게 됩니다. 단일 DEX가 65,536 개의 메소드만을 가질 수 있는 Dalvik 체계에서 서포트 라이브러리때문에 멀티DEX를 사용해야 하는 경우가 생길 수도 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;버전통일 문제
복수개의 서포트 라이브러리를 사용하는 경우 모든 버전을 동일하게 유지해야 합니다. 예를들어 다음과 같이 라이브러리를 사용중에 cardview에 문제가 있어서 27.1.0으로 버전을 내릴 경우 다른 라이브러리도 모두 27.1.0으로 내려야 하는 것이죠.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;implementation com.android.support:appcompat-v7:27.1.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;implementation com.android.support:design:27.1.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;implementation com.android.support:cardview-v7:27.1.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;androidx-체계의-도입&#34;&gt;
    &lt;a href=&#34;#androidx-%ec%b2%b4%ea%b3%84%ec%9d%98-%eb%8f%84%ec%9e%85&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Androidx 체계의 도입
&lt;/h2&gt;&lt;p&gt;이러한 이름체계의 혼란을 정리하기 위해 구글은 2018년 Google I/O 세션인 &lt;a class=&#34;link&#34; href=&#34;https://youtu.be/jdKUm8tGogw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Android Jetpack: What’s new in Android Support Library&lt;/a&gt;에서 라이브러리 패키징방식의 변경을 발표합니다. 봄맞이 대청소를 통해 Android Extension Libraries라는 명칭으로 바뀐 서포트 라이브러리는 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/jetpack/androidx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;androidx&lt;/a&gt;라는 네임스페이스를 부여받게 되었고 다음과 같은 원칙하에 요소들을 관리하게 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;1-라이브러리의-기능별-분리&#34;&gt;
    &lt;a href=&#34;#1-%eb%9d%bc%ec%9d%b4%eb%b8%8c%eb%9f%ac%eb%a6%ac%ec%9d%98-%ea%b8%b0%eb%8a%a5%eb%b3%84-%eb%b6%84%eb%a6%ac&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    1. 라이브러리의 기능별 분리
&lt;/h3&gt;&lt;p&gt;발표에 따르면 &lt;code&gt;support-core-ui&lt;/code&gt;는 &lt;code&gt;asynclayoutinflater, drawerlayout, interpolator, cursoradapter, customview, slideingpanellayout, swiperefreshlayout, viewpager&lt;/code&gt; 등으로 쪼개집니다. 따라서 viewpager가 필요하면 쓰지도 않는 나머지 dependency를 모두 임포트할 필요 없이 viewpager를 바로 임포트하면 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;2-versioning-방식-변경&#34;&gt;
    &lt;a href=&#34;#2-versioning-%eb%b0%a9%ec%8b%9d-%eb%b3%80%ea%b2%bd&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    2. Versioning 방식 변경
&lt;/h3&gt;&lt;p&gt;API 레벨과 동기화되어 올라가던 Versioning 방식은 28.0.0 부터 1.0.0으로 리셋되고 &lt;code&gt;Major.Minor.Patch&lt;/code&gt; 형식의 엄격한 &lt;a class=&#34;link&#34; href=&#34;https://semver.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Semantic Versioning&lt;/a&gt;을 준수하게 됩니다. 버전으로부터 Patch는 버그픽스이고, Minor는 기능추가, Major는 바이너리의 호환성이 없다는 사실을 이제 명확하게 파악할 수 있습니다.&lt;/p&gt;
&lt;p&gt;라이브러리 전체의 변경이 아닌 아티팩트당 버전 변경이 이루어지게 되므로 예를들어 RecyclerView의 업데이트가 이루어지면 RecyclerView 패키지만을 개별적으로 업데이트할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;3-패키징-방식-변경&#34;&gt;
    &lt;a href=&#34;#3-%ed%8c%a8%ed%82%a4%ec%a7%95-%eb%b0%a9%ec%8b%9d-%eb%b3%80%ea%b2%bd&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    3. 패키징 방식 변경
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;android.support.v7.app&lt;/code&gt; 과 같은 이름을 가져서, 어떤 기능이 포함되어 있는지 알 수 없었던 기존 Support library의 문제점을 개선하기 위해, 패키지 이름은 기능을 직관적으로 나타내도록 변경되었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java Package : &lt;code&gt;androidx.&amp;lt;feature&amp;gt;.ClassName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Maven id : &lt;code&gt;androidx.&amp;lt;feature&amp;gt;:&amp;lt;feature&amp;gt;-&amp;lt;sub-feature&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;변화된 Java package와 Maven artifact의 리스트는 각각 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/jetpack/androidx/migrate/class-mappings&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Class Mappings&lt;/a&gt;와 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/jetpack/androidx/migrate/artifact-mappings&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Artifact Mappings&lt;/a&gt; 문서에서 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;Androidx의 최신 릴리즈 내용은 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/jetpack/androidx/versions&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AndroidX releases&lt;/a&gt;에서 확인할 수 있고 각 릴리즈 노트는 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/jetpack/androidx/versions/all-channel&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Recent Release Notes&lt;/a&gt;에 정리하고 있습니다. 그리고 각 릴리즈의 개별 커밋은 &lt;a class=&#34;link&#34; href=&#34;https://github.com/androidx/androidx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Github&lt;/a&gt;에서 확인할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;android-jetpack&#34;&gt;
    &lt;a href=&#34;#android-jetpack&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Android Jetpack
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://cliearl.github.io/images/support-library-androidx-jetpack/jetpack-icon.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;그리고 Androidx를 소개했던 세션에서 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/jetpack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Jetpack&lt;/a&gt;도 같이 발표됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jetpack is a suite of libraries to help developers follow best practices, reduce boilerplate code, and write code that works consistently across Android versions and devices so that developers can focus on the code they care about.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jetpack은 한마디로 안드로이드 앱을 더 완성도 높게 만들 수 있는 라이브러리의 모음입니다. 주로 androidx의 라이브러리가 포함되지만 androidx가 아닌 라이브러리가 포함될 수도 있습니다.&lt;/p&gt;
&lt;p&gt;같은 기능을 구현하더라도 개발자의 숙련도에 따라 앱의 안정성이 달라지는 현상을 가능한 줄이기 위해 구글에서 가이드라인을 만들었고 그 가이드라인에 따르기 위해 사용해야할 라이브러리를 정의한 문서스펙이라고 생각하시면 좋을 것 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cliearl.github.io/images/support-library-androidx-jetpack/jetpack-category.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;출처 : https://android-developers.googleblog.com/2018/05/use-android-jetpack-to-accelerate-your.html&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Jetpack은 Architecture, UI, Behavior, Foundation 의 네 가지 카테고리로 구성되어 있고 각 카테고리는 그림에 보이는 것과 같은 컴포넌트들이 해당됩니다. 각 컴포넌트는 개별적으로 앱에서 사용 가능하고 이전 버전과 호환성을 유지할 수 있게 구성되었는데요, &lt;a class=&#34;link&#34; href=&#34;https://youtu.be/r8U5Rtcr5UU&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Introducing Android Jetpack for developers&lt;/a&gt;에 따르면 Jetpack은 다음과 같은 특징을 갖는다고 하네요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modern App Architecture&lt;/li&gt;
&lt;li&gt;Eliminate Boiler Plate Code&lt;/li&gt;
&lt;li&gt;Simplifying Complex Tasks&lt;/li&gt;
&lt;li&gt;Robust Backwards Compatibility&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그림에 표시한 것 외에도 Jetpack에는 수많은 컴포넌트들이 있는데 이들의 전체 리스트와 각각의 기능은 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/jetpack/androidx/explorer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Explore the Jetpack libraries&lt;/a&gt;에서 확인하실 수 있습니다.&lt;/p&gt;
&lt;p&gt;이렇게 해서 Support library와 Androidx와 Jetpack에 대해 알아보았습니다.&lt;/p&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/HyLFtBHzba0&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

</description>
        </item>
        
    </channel>
</rss>
